
# build.gradle 파일에 jdbc, h2 데이터베이스 관련 라이브러리 추가
implementation 'org.springframework.boot:spring-boot-starter-jdbc'
runtimeOnly 'com.h2database:h2'

# 스프링 부트 데이터베이스 연결 설정 추가 - resources/application.properties
spring.datasource.url=jdbc:h2:tcp://localhost/~/test
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa

## 1) 순수 JDBC

Jdbc 리포지토리 구현 -> JdbcMemberRepository.java

# SpringConfig 수정 - MemberRepository
MemoryMemberRepository -> JdbcMemberRepository 구현체 변경
이제 H2 DB에 저장된다.

## 2) 스프링 JdbcTemplate

- 순수 Jdbc와 동일한 환경설정
- 스프링 JdbcTemplate과 MyBatis 같은 라이브러리는 JDBC API에서 본 반복 코드를 대부분 제거해준다.
- SQL은 직접 작성해야 한다.

JdbcTemplate 리포지토리 구현 -> JdbcTemplateMemberRepository.java

## 3) JPA

- JPA는 기존의 반복 코드는 물론이고, 기본적인 SQL도 JPA가 직접 만들어서 실행해준다.
- JPA를 사용하면, SQL과 데이터 중심의 설계에서 설계 중심의 설계로 패러다임을 전환을 할 수 있다.
- JPA를 사용하면 개발 생산성을 크게 높일 수 있다.

# build.gradle 파일에 JPA, h2 데이터베이스 관련 라이브러리 추가

dependencies {
	... 생략
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'
}

spring-boot-starter-data-jpa 는 내부에 jdbc 관련 라이브러리를 포함한다. 따라서 jdbc는 제거해도 된다.

# 스프링 부트에 JPA 설정 추가 - resources/application.properties
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none

show-sql : JPA가 생성하는 SQL 출력한다.
ddl-auto : JPA는 테이블을 자동으로 생성하는 기능을 제공하는데 none를 사용하면 해당 기능을 끈다.

ddl-auto=create : 엔티티 정보를 바탕으로 테이블도 직접 생성해준다.

Java의 ORM(Object-Relational-Mapping) 프레임워크 : JPA(Java Persistence API)
-> 객체지향 프로그래밍 언어에서 데이터베이스의 데이터를 객체로 매핑하는 기술

@Entity -> Member.java 주석 참고

JPQL , EntityManager, JPQL 예시  -> JpaMemberRepository.java 참고

JPA에서 데이터 저장을 하려면 트랜잭션 안에서 실행 되어야 한다.
서비스 계층에  @Transactional 추가  or 회원가입 부분 method 범위에서 @Transactional 추가