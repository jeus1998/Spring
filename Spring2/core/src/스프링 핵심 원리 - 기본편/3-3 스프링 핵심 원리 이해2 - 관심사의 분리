
애플리케이션을 하나의 공연이라고 가정
각각의 인터페이스를 배우 역할이라고 생각하자

로미오와 줄리엣 공연을 하면 로미오 역할을 누가 할지 줄리엣 역할을 누가 할지는 배우들이 정하는게 아니다.
이전 코드는 마치 로미오 역할(인터페이스)을 하는 디카프리오(구현체, 배우)가 줄리엣 역할(인테페이스)을 하는
여자 주인공(구현체, 배우)를 직접 초빙하는 것과 같다.
디카프리오는 공연도 해야하고 동시에 여자 주인공도 공연에 직접 초빙해야 하는 다양한 책임을 가지고 있다.

관심사를 분리하자
- 배우는 본인의 역할인 배역을 수행하는 것에만 집중해야 한다. -> SRP
- 디카프리오는 어떤 여자 주인공이 선택되더라도 똑같이 공연을 할 수 있어야 한다. -> DIP 추상화에 의존
- 공연을 구성하고, 담당 배우를 섭외하고, 역할에 맞는 배우를 지정하는 책임을 담당하는 별도의 공연 기획자(스프링 컨테이너)가 나올시점
- 공연 기획자를 만들고, 배우와 공연 기획자의 책임을 확실히 분리하자.

AppConfig 등장
애플리케이션의 전체 동작 방식을 구성(config)하기 위해 구현 객체를 생성 하고, 연결 하는 책임을 가지는
별도의 설정 클래스를 만들자.

AppConfig.java 참고

AppConfig는 애플리케이션의 실제 동작에 필요한 구현 객체를 생성한다.

MemberServiceImpl
MemoryMemberRepository
OrderServiceImpl
FixDiscountPolicy

AppConfig는 생성한 객체 인스턴스의 참조(레퍼런스)를 생성자를 통해서 주입(연결)해준다

MemberServiceImpl: MemoryMemberRepository
OrderServiceImpl: MemoryMemberRepository , FixDiscountPolicy

   public class MemberServiceImpl implements MemberService {

       private final MemberRepository memberRepository;

       public MemberServiceImpl(MemberRepository memberRepository) {
           this.memberRepository = memberRepository;
       }
       ....
    }

설계 변경으로 MemberServiceImpl은 MemoryMemberRepository를 의존하지 않는다.
단지 MemberRepository 인터페이스만 의존한다.
MemberServiceImpl 입장에서 생성자를 통해 어떤 구현 객체가 들어올지(주입될지)는 알 수 없다.
MemberServiceImpl 생성자를 통해서 어떤 구현 객체를 주입할지는 오직 외부 AppConfig 에서 결정된다.
MemberServiceImpl은 이제부터 의존관계에 대한 고민은 외부에 맡기고 실행에만 집중 하면 된다.

클라이언트인 MemberServiceImpl 입장에서 보면 의존관계를 마치 외부에서 주입해주는 것 같다고 해서
DI(DependencyInjection) 우리말로 의존관계 주입 또는 의존성 주입이라 한다.


정리
- AppConfig를 통해서 관심사를 확실하게 분리했다.
- 배역, 배우를 생각해보자.
- AppConfig는 공연 기획자다.
- AppConfig는 구체 클래스를 선택한다. 배역에 맞는 담당 배우를 선택한다.
- 애플리케이션이 어떻게 동작해야 할지 전체 구성을 책임진다.
- 이제 각 배우들은 담당 기능들을 실행하는 책임만 지면 된다.
- OrderServiceImpl은 기능을 실행하는 책임만 지면 된다.

