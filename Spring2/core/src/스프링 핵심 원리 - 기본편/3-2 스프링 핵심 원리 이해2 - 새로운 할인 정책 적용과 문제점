
방금 추가한 정률 할인 정책을 적용해보자.

할인 정책을 변경하려면 클라이언트인 OrderServiceImpl 코드를 고쳐야 한다.

public class OrderServiceImpl implements OrderService {
    // private final DiscountPolicy discountPolicy = new FixDiscountPolicy();
    private final DiscountPolicy discountPolicy = new RateDiscountPolicy();
}

문제점 발견
- 우리는 역할과 구현을 충실하게 분리했다. ok
- 다형성도 활용하고, 인터페이스와 구현 객체를 분리했다. ok
- OCP, DIP 같은 객체지향 설계 원칙을 충실하게 준수했다?
    -> 그렇게 보이지만 사실은 no

-> 클래스 의존관계를 분석해 보자 추상(인터페이스)뿐만 아니라 구체(구현)클래스에도 의존하고 있다.
    - 추상(인터페이스): DiscountPolicy
    - 구체(구현)클래스: FixDiscountPolicy, RateDiscountPolicy

- OCP 위반: 다형성을 활용하면 변경하지 않고(OCP를 지키면서) 확장할 수 있다고 했는데 클라이언트 변경을 해야만 할인 정책이 적용

왜 클라이언트 코드를 변경해야 할까?

클래스 다이어그램으로 의존관계를 분석해 보자.

실제 의존관계

<<interface>>                                                  <<interface>>
OrderService       -------------------------------------------DiscountPolicy
     |            /                                           /            \
     |           /                                           /              \
     |          /                                           /                \
     |         /                                           /                  \
OrderServiceImpl ------------------------------- FixDiscountPolicy        RateDiscountPolicy

클아이언트인 OrderServiceImpl이 DiscountPolicy 뿐만 아니라 FixDiscountPolicy인 구체 클래스도 함께 의존하고 있다.
-> DIP 위반

정책 변경시 의존관계

<<interface>>                                                  <<interface>>
OrderService       -------------------------------------------DiscountPolicy
     |            /                                           /            \
     |           /                                           /              \
     |          /                                           /                \
     |         /                                           /                  \
OrderServiceImpl                              FixDiscountPolicy        RateDiscountPolicy
            \                                                             /
             \-----------------------------------------------------------/


FixDiscountPolicy -> RateDiscountPolicy로 변경하는 순간 OrderServiceImpl 소스 코드도 함께 변경해야 한다!
-> OCP 위반

어떻게 문제를 해결할 수 있을까???

추상에만 의존하다록 변경(인터페이스에만 의존)
DIP를 위반하지 않도록 인터페이스에만 의존하도록 의존관계를 변경하면 된다.

<<interface>>                                                  <<interface>>
OrderService       -------------------------------------------DiscountPolicy
     |            /                                           /            \
     |           /                                           /              \
     |          /                                           /                \
     |         /                                           /                  \
OrderServiceImpl                               FixDiscountPolicy        RateDiscountPolicy


public class OrderServiceImpl implements OrderService {
     private DiscountPolicy discountPolicy;
}

- 인터페이스에만 의존하도록 설계와 코드를 변경했다.
- 그런데 구현체가 없는데 어떻게 코드를 실행할 수 있을까?
- 실제 실행을 해보면 NPE(null pointer exception) 발생한다.

해결방안
- 이 문제를 해결하려면 누군가가 클라이언트인 OrderServiceImpl에 DiscountPolicy 구현 객체를 대신 생성하고 주입해주어야 한다.
